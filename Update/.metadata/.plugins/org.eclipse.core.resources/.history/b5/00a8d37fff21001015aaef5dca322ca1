package com.tms.servlets;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import com.tms.beans.TrainBean;
import com.tms.beans.TrainException;
import com.tms.constant.UserRole;
import com.tms.service.TrainService;
import com.tms.service.impl.TrainServiceImpl;
import com.tms.utils.TrainUtil;

@SuppressWarnings("serial")
@WebServlet("/trainbwstn")
public class TrainBwStn extends HttpServlet {
    private TrainService trainService = new TrainServiceImpl();

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {
        res.setContentType("text/html;charset=UTF-8");
        PrintWriter pw = res.getWriter();

        // Ensure user is authorized
        TrainUtil.validateUserAuthorization(req, UserRole.CUSTOMER);

        try {
            String fromStation = req.getParameter("fromstation");
            String toStation = req.getParameter("tostation");
            List<TrainBean> trains = trainService.getTrainsBetweenStations(fromStation, toStation);

            // Include common header/navbar
            RequestDispatcher rd = req.getRequestDispatcher("UserHome.jsp");
            rd.include(req, res);

            if (trains != null && !trains.isEmpty()) {
                pw.println("<div class='container mt-4'>");
                pw.println("<h4 class='mb-4 text-primary text-center'>Trains Between " +
                    fromStation + " and " + toStation + "</h4>");
                pw.println("<div class='table-responsive'>");
                pw.println("<table class='table table-bordered table-striped table-hover'>");
                pw.println("<thead class='table-dark'><tr>" +
                    "<th>Train Name</th><th>Train No</th><th>From</th>" +
                    "<th>To</th><th>Time</th><th>Seats</th>" +
                    "<th>Fare (â‚¹)</th><th>Action</th></tr></thead><tbody>");

                for (TrainBean train : trains) {
                    int hr = (int) (Math.random() * 24);
                    int min = (int) (Math.random() * 60);
                    String time = String.format("%02d:%02d", hr, min);

                    pw.println("<tr>" +
                        "<td>" + train.getTr_name() + "</td>" +
                        "<td>" + train.getTr_no() + "</td>" +
                        "<td>" + train.getFrom_stn() + "</td>" +
                        "<td>" + train.getTo_stn() + "</td>" +
                        "<td>" + time + "</td>" +
                        "<td>" + train.getSeats() + "</td>" +
                        "<td>" + train.getFare() + "</td>" +
                        "<td><a href='booktrainbyref?trainNo=" + train.getTr_no() +
                            "&fromStn=" + train.getFrom_stn() +
                            "&toStn=" + train.getTo_stn() +
                            "' class='btn btn-sm btn-outline-danger'>Book Now</a></td>" +
                        "</tr>");
                }

                pw.println("</tbody></table></div></div>");

            } else {
                pw.println("<div class='container mt-4'>");
                pw.println("<div class='alert alert-warning text-center' role='alert'>" +
                    "No trains found between <strong>" + fromStation +
                    "</strong> and <strong>" + toStation + "</strong>." +
                    "</div></div>");
            }

        } catch (Exception e) {
            throw new TrainException(422, this.getClass().getName() + "_FAILED", e.getMessage());
        }
    }
}