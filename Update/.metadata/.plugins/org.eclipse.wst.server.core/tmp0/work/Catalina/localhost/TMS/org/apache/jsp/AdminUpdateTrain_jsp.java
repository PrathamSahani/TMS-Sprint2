/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.27
 * Generated at: 2025-04-23 14:08:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.tms.beans.TrainBean;

public final class AdminUpdateTrain_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.tms.beans.TrainBean");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("	<title>Update Train</title>\r\n");
      out.write("	<style>\r\n");
      out.write("	body {\r\n");
      out.write("	font-family: Arial, sans-serif;\r\n");
      out.write("	margin: 0;\r\n");
      out.write("	padding: 0;\r\n");
      out.write("	background-color: #f2f2f2;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar {\r\n");
      out.write("	background-color: #333;\r\n");
      out.write("	padding: 1rem;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar ul {\r\n");
      out.write("	list-style-type: none;\r\n");
      out.write("	margin: 0;\r\n");
      out.write("	padding: 0;\r\n");
      out.write("	display: flex;\r\n");
      out.write("	gap: 1rem;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar ul li {\r\n");
      out.write("	display: inline;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar ul li a {\r\n");
      out.write("	color: white;\r\n");
      out.write("	text-decoration: none;\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".container {\r\n");
      out.write("	padding: 2rem;\r\n");
      out.write("	background-color: white;\r\n");
      out.write("	margin: 2rem auto;\r\n");
      out.write("	width: 60%;\r\n");
      out.write("	border-radius: 8px;\r\n");
      out.write("	box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".form-table td {\r\n");
      out.write("	padding: 0.5rem;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=\"text\"], input[type=\"submit\"] {\r\n");
      out.write("	padding: 0.5rem;\r\n");
      out.write("	width: 100%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".footer {\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	padding: 1rem;\r\n");
      out.write("	background-color: #333;\r\n");
      out.write("	color: white;\r\n");
      out.write("	position: fixed;\r\n");
      out.write("	bottom: 0;\r\n");
      out.write("	width: 100%;\r\n");
      out.write("}\r\n");
      out.write("	</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<!-- ✅ NAVBAR -->\r\n");
      out.write("	<header class=\"navbar\">\r\n");
      out.write("		<nav>\r\n");
      out.write("			<ul>\r\n");
      out.write("				<li><a href=\"AdminHome.html\">Dashboard</a></li>\r\n");
      out.write("				<li><a href=\"adminviewtrainfwd\">View Trains</a></li>\r\n");
      out.write("				<li><a href=\"logout\">Logout</a></li>\r\n");
      out.write("			</ul>\r\n");
      out.write("		</nav>\r\n");
      out.write("	</header>\r\n");
      out.write("\r\n");
      out.write("	<!-- ✅ MAIN CONTENT -->\r\n");
      out.write("	<main class=\"container\">\r\n");
      out.write("		<h2>Train Schedule Update</h2>\r\n");
      out.write("		");
 
			TrainBean train = (TrainBean) request.getAttribute("train");
			if (train != null) {
		
      out.write("\r\n");
      out.write("		<form action=\"updatetrainschedule\" method=\"post\">\r\n");
      out.write("			<table class=\"form-table\">\r\n");
      out.write("				<tr><td>Train No:</td><td><input type=\"text\" name=\"trainno\" value=\"");
      out.print( train.getTr_no() );
      out.write("\" readonly></td></tr>\r\n");
      out.write("				<tr><td>Train Name:</td><td><input type=\"text\" name=\"trainname\" value=\"");
      out.print( train.getTr_name() );
      out.write("\"></td></tr>\r\n");
      out.write("				<tr><td>From Station:</td><td><input type=\"text\" name=\"fromstation\" value=\"");
      out.print( train.getFrom_stn() );
      out.write("\"></td></tr>\r\n");
      out.write("				<tr><td>To Station:</td><td><input type=\"text\" name=\"tostation\" value=\"");
      out.print( train.getTo_stn() );
      out.write("\"></td></tr>\r\n");
      out.write("				<tr><td>Available Seats:</td><td><input type=\"text\" name=\"available\" value=\"");
      out.print( train.getSeats() );
      out.write("\"></td></tr>\r\n");
      out.write("				<tr><td>Fare (INR):</td><td><input type=\"text\" name=\"fare\" value=\"");
      out.print( train.getFare() );
      out.write("\"></td></tr>\r\n");
      out.write("				<tr><td></td><td><input type=\"submit\" value=\"Update Train Schedule\"></td></tr>\r\n");
      out.write("			</table>\r\n");
      out.write("		</form>\r\n");
      out.write("		");
 } else { 
      out.write("\r\n");
      out.write("			<p style=\"color:red;\">");
      out.print( request.getAttribute("error") );
      out.write("</p>\r\n");
      out.write("		");
 } 
      out.write("\r\n");
      out.write("	</main>\r\n");
      out.write("\r\n");
      out.write("	<!-- ✅ FOOTER -->\r\n");
      out.write("	<footer class=\"footer\">\r\n");
      out.write("		<p>&copy; 2025 Train Management System. All rights reserved.</p>\r\n");
      out.write("	</footer>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
